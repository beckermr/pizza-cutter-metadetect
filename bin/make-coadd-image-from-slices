#!/usr/bin/env python
"""
make a viz of a set of slices
"""
import tempfile
import os
import subprocess

import numpy as np
import yaml

import fitsio
from esutil.pbar import PBar

import click
from ngmix.medsreaders import NGMixMEDS
from pizza_cutter.files import (
    StagedOutFile,
    StagedInFile,
    makedir_fromfile,
)
from pizza_cutter_metadetect.masks import get_slice_bounds


def _make_viz(
    *,
    meds_files,
    output_path,
    tmpdir,
):
    for meds_file in meds_files:
        # this will do nothing if tmpdir is None, and because not
        # used as a context manager, it won't clean up, we rely on
        # TemporaryDirectory() to do that
        with StagedInFile(meds_file, tmpdir=tmpdir) as sf:
            m = NGMixMEDS(sf.path)

            if output_path.endswith(".fits.fz"):
                filename = output_path
            elif output_path.endswith(".fits"):
                raise RuntimeError(
                    "You must pass a path that ends with '.fits.fz' in order "
                    "to specify the exact output location."
                )
            else:
                if meds_file.endswith(".fits.fz"):
                    end_len = len(".fits.fz")
                else:
                    end_len = len(".fits")
                filename = os.path.join(
                    output_path, meds_file[:-end_len] + "-coadd-img.fits.fz",
                )

            makedir_fromfile(filename)
            print('output file:', filename, flush=True)

            # if tmpdir is none, no staging or local dir is used
            with StagedOutFile(filename, tmpdir=tmpdir) as sf:
                output_file = sf.path

                coadd_dims = (10_000, 10_000)

                obj_data = m.get_cat()
                meta = m.get_meta()
                pz_config = yaml.safe_load(meta['config'][0])
                buffer_size = int(pz_config['coadd']['buffer_size'])
                central_size = int(pz_config['coadd']['central_size'])

                full_image = np.zeros(coadd_dims, dtype=np.float32)

                for slice_ind in PBar(range(m.size), desc="reading slices"):
                    obslist = m.get_obslist(slice_ind)
                    scol = obj_data["orig_start_col"][slice_ind, 0]
                    srow = obj_data["orig_start_row"][slice_ind, 0]
                    slice_bnds = get_slice_bounds(
                        orig_start_col=scol,
                        orig_start_row=srow,
                        central_size=central_size,
                        buffer_size=buffer_size,
                        coadd_dims=coadd_dims,
                    )
                    if len(obslist) > 0:
                        img = obslist[0].image
                        full_image[
                            slice_bnds["min_row"]+srow:slice_bnds["max_row"]+srow,
                            slice_bnds["min_col"]+scol:slice_bnds["max_col"]+scol,
                        ] = img[
                            slice_bnds["min_row"]:slice_bnds["max_row"],
                            slice_bnds["min_col"]:slice_bnds["max_col"],
                        ]
                    else:
                        full_image[
                            slice_bnds["min_row"]+srow:slice_bnds["max_row"]+srow,
                            slice_bnds["min_col"]+scol:slice_bnds["max_col"]+scol,
                        ] = np.nan

                with fitsio.FITS(output_file[:-len(".fz")], "rw", clobber=True) as fits:
                    fits.write(
                        full_image,
                        extname="sci",
                        header=pz_config["fpack_pars"]
                    )
                    fits["sci"].write_keys(pz_config["fpack_pars"], clean=False)

                # fpack it
                try:
                    os.remove(output_file)
                except FileNotFoundError:
                    pass
                cmd = 'fpack %s' % output_file[:-len(".fz")]
                print("fpack cmd:", cmd, flush=True)
                try:
                    subprocess.check_call(cmd, shell=True)
                except Exception:
                    pass
                else:
                    try:
                        os.remove(output_file[:-len(".fz")])
                    except Exception:
                        pass


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--output-path', default='.', type=str,
    help=(
        'path to write the outputs; if the path ends in .fits.fz '
        'then it is treated as a file'
    )
)
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
@click.option(
    '--tmpdir', type=str, default=None,
    help=(
        'the name of the temporary directory to use. if passed without '
        '--use-tmpdir, it will still be used.'))
def main(
    meds_files, output_path, use_tmpdir, tmpdir,
):
    """Make an image of the coadd from the MEDS_FILES."""

    def _call(tmpdir):
        _make_viz(
            meds_files=meds_files,
            output_path=output_path,
            tmpdir=tmpdir,
        )

    if use_tmpdir and tmpdir is None:
        tmpdir = tempfile.TemporaryDirectory().name

    if tmpdir is not None:
        try:
            _call(tmpdir)
        finally:
            os.system("rm -rf %s" % os.path.join(tmpdir, "*"))
    else:
        _call(tmpdir)


if __name__ == '__main__':
    main()
