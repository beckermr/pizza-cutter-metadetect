#!/usr/bin/env python
"""
run metadetect on a slice file
"""
import sys
import logging
import tempfile

import click
import yaml

from pizza_cutter_metadetect.run_metadetect import (
    run_metadetect,
    get_part_ranges,
    make_output_filename,
    split_range,
)
from ngmix.medsreaders import MultiBandNGMixMEDS, NGMixMEDS
from pizza_cutter.files import (
    StagedOutFile,
    StagedInFile,
    makedir_fromfile,
)


def _process(
    *,
    meds_files,
    config,
    output_path,
    seed,
    part,
    log_level,
    meds_range,
    tmpdir,
    n_jobs,
    viz_dir,
    band_names,
):
    with open(config, 'r') as fp:
        _config = yaml.load(fp.read(), Loader=yaml.Loader)

    _preconfig = _config.pop("pizza-cutter-preprocessing", {})
    _sb_combs = _config.pop("shear_band_combs", None)
    _db_combs = _config.pop("det_band_combs", None)

    logging.basicConfig(stream=sys.stdout)
    for lib in ["pizza_cutter", "pizza_cutter_metadetect", "ngmix", "metadetect"]:
        logging.getLogger(lib).setLevel(
            getattr(logging, log_level.upper())
        )
    if log_level.upper() == "DEBUG":
        verbose = 100
    else:
        verbose = 75

    meds_list = []
    for f in meds_files:
        # this will do nothing if tmpdir is None, and because not
        # used as a context manager, it won't clean up, we rely on
        # TemporaryDirectory() to do that
        sf = StagedInFile(f, tmpdir=tmpdir)

        m = NGMixMEDS(sf.path)
        meds_list.append(m)

    mbmeds = MultiBandNGMixMEDS(meds_list)

    if part is not None:
        part, n_parts = part.split(':')
        part = int(part)
        n_parts = int(n_parts)
        start, num = get_part_ranges(part, n_parts, mbmeds.size)
    elif meds_range is not None:
        start, end_plus_one, num = split_range(meds_range)
    else:
        start = 0
        num = mbmeds.size

    if band_names is not None and len([b for b in band_names]) != len(meds_files):
        raise RuntimeError(
            "You mast pass as many band names ('%s') as meds files (%d)" % (
                band_names, len(meds_files)
            )
        )

    def _call(output_file, mask_hs_output_file, mask_img_output_file):
        run_metadetect(
            config=_config,
            output_file=output_file,
            mask_hs_output_file=mask_hs_output_file,
            mask_img_output_file=mask_img_output_file,
            multiband_meds=mbmeds,
            seed=seed,
            preconfig=_preconfig,
            start=start,
            num=num,
            n_jobs=n_jobs,
            verbose=verbose,
            viz_dir=viz_dir,
            band_names=(
                [b for b in band_names]
                if band_names is not None
                else None
            ),
            shear_band_combs=_sb_combs,
            det_band_combs=_db_combs,
        )

    if output_path.endswith(".fits"):
        filename = output_path
    elif output_path.endswith(".fits.fz"):
        raise RuntimeError(
            "You must pass a path that ends with '.fits' in order to specify the "
            "exact output location."
        )
    else:
        filename = make_output_filename(
            output_path,
            config,
            meds_files[0],
            part,
            meds_range,
        )
    mask_hs_filename = filename[:-len(".fits")] + "-healsparse-mask.hs"
    mask_img_filename = filename[:-len(".fits")] + "-mask.fits.fz"

    makedir_fromfile(filename)
    makedir_fromfile(mask_hs_filename)
    makedir_fromfile(mask_img_filename)
    print('output file:', filename, flush=True)
    print('mask healsparse output file:', mask_hs_filename, flush=True)
    print('mask image output file:', mask_img_filename, flush=True)

    # if tmpdir is none, no staging or local dir is used
    with StagedOutFile(filename, tmpdir=tmpdir) as sf:
        with StagedOutFile(mask_hs_filename, tmpdir=tmpdir) as mask_hs_sf:
            with StagedOutFile(mask_img_filename, tmpdir=tmpdir) as mask_img_sf:
                _call(sf.path,  mask_hs_sf.path,  mask_img_sf.path)

    print('output is in:', filename, flush=True)
    print('mask healsparse output is in:', mask_hs_filename, flush=True)
    print('mask image output is in:', mask_img_filename, flush=True)


@click.command()
@click.argument('meds_files', nargs=-1)
@click.option(
    '--config', default=None, type=str,
    help='configuration file',
    required=True)
@click.option(
    '--output-path', default='.', type=str,
    help=(
        'path to write the outputs; if the path ends in .fits.fz '
        'then it is treated as a file'
    )
)
@click.option(
    '--seed', default=-1, type=int,
    help='seed for the RNG',
    required=True)
@click.option(
    '--use-tmpdir', is_flag=True,
    help='use a temporary directory to stage data')
@click.option(
    '--part', default=None, type=str,
    help=('the part of the file to process in the '
          'form `--part="<part>:<n_parts>"` - '
          'Note that parts are one-indexed.'))
@click.option(
    '--range', 'meds_range', default=None, type=str,
    help=(
        'the range of entries in the MEDS file to process - '
        'Note that this option is mutually exclusive with `--part`. '
        'Futher, it is specified using normal python slicing conventions, '
        'so that `--range="0:10"` is the first 10 entries in the file, etc.'))
@click.option(
    '--log-level', default='warning', type=str,
    help='python logging level')
@click.option(
    '--tmpdir', type=str, default=None,
    help=(
        'the name of the temporary directory to use. if passed without '
        '--use-tmpdir, it will still be used.'))
@click.option(
    '--n-jobs', default=1, type=int,
    help=('the number of parallel jobs to use. defaults to 1.'))
@click.option(
    '--band-names',
    default=None,
    type=str,
    help=(
        'The list of band names as a single string (e.g., "riz"). If passed, this '
        'will put those band flux names in the outputs.'
    ),
)
@click.option(
    '--viz-dir', type=str, default=None,
    help="If set, write images of the slices to the given location.")
def main(
    meds_files, config, output_path, seed, use_tmpdir, part, log_level,
    meds_range, tmpdir, n_jobs, viz_dir, band_names,
):
    """Run metdetect on MEDS_FILES."""

    if part is not None and meds_range is not None:
        raise click.BadParameter(
            'You must specify only one of `--part` and `--range`')

    def _call(tmpdir):
        _process(
            meds_files=meds_files,
            config=config,
            output_path=output_path,
            seed=seed,
            part=part,
            log_level=log_level,
            meds_range=meds_range,
            tmpdir=tmpdir,
            n_jobs=n_jobs,
            viz_dir=viz_dir,
            band_names=band_names,
        )

    if use_tmpdir or tmpdir is not None:
        with tempfile.TemporaryDirectory(dir=tmpdir) as _tmpdir:
            _call(_tmpdir)
    else:
        _call(tmpdir)


if __name__ == '__main__':
    main()
